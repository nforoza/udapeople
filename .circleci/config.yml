version: 2.1

orbs:
  slack: circleci/slack@4.1.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
     workflow-id:
        type: string 
    steps:
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-front-end-<<parameters.workflow-id>>"
      - run:
          name: Destroy backend environmet
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-back-end-<<parameters.workflow-id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
       workflow-id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: fc7be75f-2231-4f5f-968e-710726bd778e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
            #  Add revert code here. You can find this in the Getting Started section.
               npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: 'frontend-build-{{arch}}'
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm install --package-lock

      - save_cache:
          paths: [frontend/node_modules,frontend/package-lock.json]
          key: 'frontend-build-{{arch}}-{{ checksum "frontend/package.json" }}'
      
      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
                 
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: 'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm install --package-lock
             npm run build
      - save_cache:
          paths: [backend/node_modules,backend/package-lock.json,backend/dist]
          key: 'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'
      
      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }

  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: 'frontend-build-{{arch}}-{{ checksum "frontend/package.json" }}'
      # Your job code here
      - run:
          name: Front-End test
          command: |
            cd ./frontend
            npm run test
          no_output_timeout: 15m

      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: 'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'
      # Your job code here
      - run:
          name: Back End test
          command: |
            cd ./backend
            npm run test
      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: 'frontend-build-{{arch}}-{{ checksum "frontend/package.json" }}'
      # Your job code here
      - run: 
          name: Front-End Analyze
          command: |
            cd ./frontend
            npm audit --audit-level=critical
      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key:  'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'
      # Your job code here
      - run:
          name: Back.End Analyze
          command: |
            cd ./backend
            npm audit --audit-level=critical
      - slack/notify:
          channel: C01HKAG06F7
          event: always
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install  tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=$CIRCLE_PROJECT_REPONAME \
              --stack-name "udapeople-back-end-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=$CIRCLE_PROJECT_REPONAME \
              --stack-name "udapeople-front-end-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["bc:78:08:9c:b1:50:d0:77:b4:39:87:76:88:4e:13:8c"]
     
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache tar gzip
            apk add --update ansible
      
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            # Your code here
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      
      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
      # Here's where you will add some code to rollback on failure
      # Install aws client 
      - run:
          name: Install aws cli for rollback procedure
          when: on_fail 
          command: |
            pip install --upgrade pip 
            pip install awscli 

      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID
            
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          key: 'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd ./backend
            npm run migrations >> migrations_output.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd ./backend
            if(grep "Has been executed successfully" migrations_output.txt); then
              curl -H "Content-Type: text/plain" -H "token: fc7be75f-2231-4ff-968e-710726bd778e" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            
      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
     # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow-id: $CIRCLE_WORKFLOW_ID
        
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here TODO node version should be consistent accross workflow
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      
      - restore_cache:
          key: 'frontend-build-{{arch}}-{{ checksum "frontend/package.json" }}'

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            # Get second line from inventory where the backend ip 
            export BACKEND_IP=awk "NR==2" ~/project/.circleci/ansible/inventory.txt
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd ./frontend
            npm run build
            cd ./dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}"/ --delete

      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
   
    steps:
      # Checkout code from git
      - checkout
     
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints: ["bc:78:08:9c:b1:50:d0:77:b4:39:87:76:88:4e:13:8c"]
     
      - restore_cache:
          key: 'backend-build-{{arch}}-{{ checksum "backend/package.json" }}'
      
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache tar gzip
            apk add --update ansible
            apk add --update curl
      
      # attach workspace
      - attach_workspace:
          at: ~/
      
      - run:
          name: Copy Files to server
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=awk "NR==2" ~/project/.circleci/ansible/inventory.txt
            export API_URL="http://${BACKEND_IP}:3030"
      
      - run:
          name: Backend smoke test.
          command: |
              # your code here
              if curl -s --head ${API_URL} # test if backend is running
              then
               return 0
              else
               return 1
              fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export URL = "https://udapeople-${WorkflowID}.s3.amazonaws.com"
            if curl -s --head ${URL} # test if backend is running
              then
               return 0
              else
               return 1
              fi
      
      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }

      # Here's where you will add some code to rollback on failure
      - run:
          name: Install awscli for rollingback
          when: on_fail
          command: |
            apk add  --no-cache \
                        python3 \
                        py3-pip \
                    && pip3 install --upgrade pip \
                    && pip3 install \
                        awscli \
                    && rm -rf /var/cache/apk/*

      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here

      - slack/notify:
          channel: C01HKAG06F7
          event: fail
          custom: |
               {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "CircleCI pipeline status notification for project: $CIRCLE_PROJECT_REPONAME and branch: $CIRCLE_BRANCH"
                        },
                        "block_id": "header"
                      },
                      {
                        "type": "section",
                        "block_id": "body",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Build status*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CCI_STATUS"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build date*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$(date +'%m/%d/%Y %T')"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Build URL*"
                          },
                          {
                            "type": "plain_text",
                            "text": "$CIRCLE_BUILD_URL"
                          }
                        ]
                      }
                    ]
                  }
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow-id: $CIRCLE_WORKFLOW_ID

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
        - slack/notify:
            event: fail
            template: basic_fail_1

        - slack/notify:
            event: pass
            template: basic_pass_1
            
workflows:
  default:
    jobs:
      - build-frontend:
          context: 
            - circleci-udapeople-slack
      - build-backend:
          context: 
            - circleci-udapeople-slack
      - test-frontend:
          context: 
            - circleci-udapeople-slack
          requires: [build-frontend]
      - test-backend:
          context: 
            - circleci-udapeople-slack
          requires: [build-backend]
      - scan-backend:
          context:
            - circleci-udapeople-slack 
          requires: [build-backend]
      - scan-frontend:
          context:
            - circleci-udapeople-slack
          requires: [build-frontend]
      - deploy-infrastructure:
          context: 
            - circleci-udapeople-slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - main
      - configure-infrastructure:
          context:
            - circleci-udapeople-slack
          requires: [deploy-infrastructure]
      - run-migrations:
          context:
            - circleci-udapeople-slack
          requires: [configure-infrastructure]

      - deploy-frontend:
          context:
            - circleci-udapeople-slack
          requires: [run-migrations]
      - deploy-backend:
          context:
            - circleci-udapeople-slack
          requires: [run-migrations]
      - smoke-test:
          context:
            - circleci-udapeople-slack
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context:
            - circleci-udapeople-slack
          requires: [smoke-test]
      - cleanup:
          context:
            - circleci-udapeople-slack
          requires: [cloudfront-update]